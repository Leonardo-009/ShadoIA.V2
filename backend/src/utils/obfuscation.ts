export interface ObfuscationResult {
  obfuscatedText: string
  detectedData: {
    ips: string[]
    emails: string[]
    users: string[]
    domains: string[]
    hashes: string[]
    sessions: string[]
  }
}

export function obfuscateLogData(logText: string): ObfuscationResult {
  let obfuscatedText = logText
  const detectedData = {
    ips: [] as string[],
    emails: [] as string[],
    users: [] as string[],
    domains: [] as string[],
    hashes: [] as string[],
    sessions: [] as string[],
  }

  // Regex patterns for detection
  const patterns = {
    ipv4: /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/g,
    ipv6: /\b(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}\b/g,
    email: /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,
    username: /\b(?:user|username|account|login|logon)[\s:=]+([a-zA-Z0-9._-]+)\b/gi,
    domain: /\b[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.([a-zA-Z]{2,})\b/g,
    hash: /\b[a-fA-F0-9]{32}\b|\b[a-fA-F0-9]{40}\b|\b[a-fA-F0-9]{64}\b/g,
    session: /\b(?:session|sess|sid)[\s:=]+([a-zA-Z0-9._-]+)\b/gi,
    hostname: /\b(?:host|hostname|computer)[\s:=]+([a-zA-Z0-9._-]+)\b/gi,
  }

  // Ofuscar apenas IPs e usu√°rios (n√£o e-mails, dom√≠nios, hashes, hostname, etc)
  // Detect and obfuscate IPs
  const ipMatches = [...logText.matchAll(patterns.ipv4), ...logText.matchAll(patterns.ipv6)]
  ipMatches.forEach((match) => {
    if (match[0] && !detectedData.ips.includes(match[0])) {
      detectedData.ips.push(match[0])
      obfuscatedText = obfuscatedText.replace(new RegExp(escapeRegex(match[0]), "g"), "[IP_OFUSCADO]")
    }
  })

  // Detect and obfuscate usernames (usu√°rio de origem/afetado)
  const userMatches = [...logText.matchAll(patterns.username)]
  userMatches.forEach((match) => {
    if (match[1] && !detectedData.users.includes(match[1])) {
      detectedData.users.push(match[1])
      obfuscatedText = obfuscatedText.replace(new RegExp(escapeRegex(match[1]), "g"), "[USUARIO_OFUSCADO]")
    }
  })

  // Detect emails, domains, hashes, sessions, hostname, mas N√ÉO ofusca
  const emailMatches = [...logText.matchAll(patterns.email)]
  emailMatches.forEach((match) => {
    if (match[0] && !detectedData.emails.includes(match[0])) {
      detectedData.emails.push(match[0])
    }
  })
  const domainMatches = [...logText.matchAll(patterns.domain)]
  domainMatches.forEach((match) => {
    if (match[0] && !detectedData.domains.includes(match[0])) {
      detectedData.domains.push(match[0])
    }
  })
  const hashMatches = [...logText.matchAll(patterns.hash)]
  hashMatches.forEach((match) => {
    if (match[0] && !detectedData.hashes.includes(match[0])) {
      detectedData.hashes.push(match[0])
    }
  })
  const sessionMatches = [...logText.matchAll(patterns.session)]
  sessionMatches.forEach((match) => {
    if (match[1] && !detectedData.sessions.includes(match[1])) {
      detectedData.sessions.push(match[1])
    }
  })
  // Hostname detecta mas n√£o ofusca

  return {
    obfuscatedText,
    detectedData,
  }
}

function escapeRegex(string: string): string {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
}

export function generateAIPrompt(obfuscatedLog: string, _reportType: string): string {
  const basePrompt = `Voc√™ √© um analista s√™nior de seguran√ßa cibern√©tica. Analise o log abaixo e forne√ßa um relat√≥rio estruturado e organizado. Seja objetivo, evite jarg√µes t√©cnicos desnecess√°rios e forne√ßa recomenda√ß√µes pr√°ticas e acion√°veis.

IMPORTANTE: Estruture sua resposta EXATAMENTE no formato especificado abaixo, preenchendo apenas os campos para os quais houver informa√ß√£o dispon√≠vel no log.

FORMATO OBRIGAT√ìRIO:

Prezados(as), {saudacao}.

Foi identificada atividade suspeita pela equipe de monitoramento no seu ambiente. Detalhes para valida√ß√£o:

üïµ An√°lise: [Forne√ßa uma an√°lise t√©cnica clara e concisa do evento de seguran√ßa]

üìä Fonte: [Identifique a fonte do log, ex.: Windows Event Log, Syslog, Check Point SmartDefense]

üö® Severidade: [Classifique a severidade: Baixa, Moderada, Alta, Cr√≠tica]

üßæ Evid√™ncias:

Data do Log: [Data e hora do evento]
Fonte do Log: [Sistema ou componente que gerou o log]
Usu√°rio de Origem: [Usu√°rio associado, se aplic√°vel]
Usu√°rio Afetado: [Usu√°rio impactado, se aplic√°vel]
IP/Host de Origem: [IP ou host que gerou o evento]
IP/Host Afetado: [IP ou host impactado]
Localiza√ß√£o (Origem/Impactado): [Localiza√ß√£o geogr√°fica ou l√≥gica, se dispon√≠vel]
Tipo do Evento: [Tipo de evento, ex.: tentativa de explora√ß√£o, falha de autentica√ß√£o]
Grupo: [Categoria do evento, ex.: SmartDefense, Firewall]
Objeto: [Recurso alvo, ex.: SNMP, HTTP]
Nome do Objeto: [Nome espec√≠fico do recurso, ex.: bsnmpd]
Tipo do Objeto: [Tipo de recurso, ex.: Servi√ßo, Aplica√ß√£o]
Assunto: [Resumo do evento, ex.: SNMP Protection Violation]
Pol√≠tica: [Pol√≠tica ou configura√ß√£o relevante, se aplic√°vel]
Nome da Amea√ßa: [Nome da amea√ßa detectada, ex.: FreeBSD bsnmpd GETBULK PDU Stack Buffer Overflow]
Nome do Processo: [Processo envolvido, ex.: bsnmpd]
Nome da Regra MPE: [Regra que disparou o alerta, se aplic√°vel]
Mensagem do Fornecedor: [Mensagem ou c√≥digo de erro do sistema]
ID do Fornecedor: [Identificador √∫nico do evento, se dispon√≠vel]
Identificador de Navegador: [User-agent, se aplic√°vel]
A√ß√£o: [A√ß√£o tomada, ex.: Detect, Block, Alert]
Status: [Status da a√ß√£o, ex.: Bloqueado, Falha, Sucesso]
Resultado: [Resultado final, se aplic√°vel]

üïµ Justificativa: [Explique por que este evento merece aten√ß√£o, considerando gravidade, contexto, recorr√™ncia, poss√≠veis riscos e rela√ß√£o com pol√≠ticas de seguran√ßa]

üìå Recomenda√ß√µes:

‚Ä¢ [Recomenda√ß√£o 1 - espec√≠fica e acion√°vel]
‚Ä¢ [Recomenda√ß√£o 2 - espec√≠fica e acion√°vel]
‚Ä¢ [Recomenda√ß√£o 3 - espec√≠fica e acion√°vel]
‚Ä¢ [Recomenda√ß√£o 4 - espec√≠fica e acion√°vel]
‚Ä¢ [Recomenda√ß√£o 5 - espec√≠fica e acion√°vel]

Log para an√°lise:
${obfuscatedLog}

Lembre-se: Mantenha o formato exato especificado acima e preencha apenas os campos para os quais h√° informa√ß√µes dispon√≠veis no log.`

  return basePrompt
}
